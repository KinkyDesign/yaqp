package org.opentox.Resources;


import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.restlet.Context;
import org.restlet.data.Request;
import org.restlet.data.Response;
import org.restlet.resource.Resource;

/**
 * Every Resource of the package extends this class.
 * @author OpenTox - http://www.opentox.org
 * @author Sopasakis Pantelis
 * @author Sarimveis Harry
 * @version 1.4 (Last Update: Aug 26, 2009)
 */
public abstract class AbstractResource  extends Resource{

    /**
     * version unique serial number.
     */
    private static final long serialVersionUID = 1048422959964500138L;

    /**
     * The first line of every XML file.
     */
    protected static final String xmlIntro="<?xml version=\"1.0\" encoding=\"UTF-8\" ?>";

    /**
     * Head of HTML files
     */
    protected String htmlHEAD="<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\""+
                    "\"http://www.w3.org/TR/html4/loose.dtd\">" +
                    "<html><head><title>NTUA - RESTful Web Services</title></head><body>";

    /**
     * Logger
     */
    protected Logger logger ;

    /**
     * End of HTML files
     */
    protected static final  String
                htmlEND="</body></html>";

    /**
     * Head of PMML files
     */
    protected static final  String
                PMMLIntro="<PMML version=\"3.2\" " +
                " xmlns=\"http://www.dmg.org/PMML-3_2\"  " +
                " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> " +
                " <Header copyright=\"http://www.opentox.org\" />";

    /**
     * Base Directory
     */
    private static final String
                baseDir=System.getProperty("user.home")+"/Documents/RESTfulWebServices";

    /**
     * Log
     */
    public static final String
                logDir=baseDir+"/log";

    /**
     * Data directory.
     * Directory where users have permission to upload data files.
     */
    protected static final String
                  uploadDir=baseDir+"/uploads/data";

    /**
     * Repository for arff files uploaded by the users.
     */
    protected static final String
                  arffDir=uploadDir+"/arff";

    /**
     * Repository for xrff files
     */
    protected static final String
                xrffDir=uploadDir+"/xrff";

    /**
     * Repository for the generated DSD files which are automatically
     * generated each time a user uploads an ARFF file.
     */
    protected static final String
                  dsdDir=uploadDir+"/dsd";


    /**
     * Repository for the generated meta-inf XML files which are automatically
     * generated each time a user uploads an ARFF file.
     */
    protected static final String
                       metaDir=uploadDir+"/meta";


    /**
     * Repository for the generated scaled-DSD files which are automatically
     * generated each time a user uploads an ARFF file.
     */
    protected static final String
                       scaledDir=uploadDir+"/scaled";

    /**
     * Repository for the generated range files which are automatically
     * generated each time a user uploads an ARFF file.
     */
    protected static final String
                       rangeDir=uploadDir+"/range";


    /**
     * Repository for classification and regression models.
     */
    private static final String
                  modelsDir=baseDir+"/models";


    /**
     * Repository for xml representations of models
     *
     */
    public static final String
            modelsXmlDir = modelsDir + "/xml";

    /**
     * Repository for classification models.
     */
    private static final String
                  CLS_modelsDir=modelsDir+"/classification";

    /**
     * Repository for regreesion models.
     */
    private static final String
                  REG_modelsDir=modelsDir+"/regression";

    /**
     * Repository for svc (classification models).
     */
    protected static final String
                        CLS_SVM_modelsDir=CLS_modelsDir+"/svc";

    /**
     * Repository for svm regression models
     */
    protected static final String
                        REG_SVM_modelsDir=REG_modelsDir+"/svm";


    
    /**
     * Repository for MLR regression models. The MLR models generated by the
     * users are stored in this directory.
     */
    protected static final String
                        REG_MLR_modelsDir=REG_modelsDir+"/mlr";

    /**
     * Prefix of uploaded arff files
     */
    protected static final String
            dataSetPrefix="dataSet-";

    /**
     * Prefix of all models.
     */
    protected static final String
            modelPrefix="model-";

    /**
     * General Prefix.
     */
    protected static final String
            OpenToxPrefix="OpenTox-";

    /**
     * Prefix of validation results.
     */
    protected static final String
            validationResultPrefix="validation-";
                

    /**
     * Port used by the web services. This variable has to be overriden if the
     * services are deployed on another domain.
     */
    public static String
                port="3000";

    /**
     * Base URI of the web services. This variable has to be overriden if the
     * services are deployed on another domain.
     */
    public static String
                baseURI="http://opentox.ntua.gr:"+port+"/OpenToxServices";

    public static final String
            ModelURI = baseURI + "/model";

    private static String
            ClassificationModelURI = baseURI+"/model/classification";



    public static String
            SvcModelURI=ClassificationModelURI+"/svc";


    private static String
            RegressionModelURI=baseURI+"/model/regression";

    public static String
            SvmModelURI=RegressionModelURI+"/svm";

    /**
     * URI for all learning algorithms! (Private)
     * 
     */
    private static String
            LearningAlgorithmURI = baseURI + "/algorithm/learning";

    /*
     * URI for Support vector classifier
     */
    public static String
            SvcAlgorithmURI = LearningAlgorithmURI + "/classification/svc";

    public static String
            SvmAlgorithmURI = LearningAlgorithmURI + "/regression/svm";

    public static String
            MlrAlgorithmURI = LearningAlgorithmURI + "/regression/mlr";
    /**
     * Server IP.
     */
    protected static String serverIP="147.102.82.32";

    /**
     * Validation Results.
     */
    private static final String
           validationResultsDir=baseDir+"/validationResults";

    /**
     * Regression Validation Results.
     */
    private static final String
                RegressionValidationResultsDir=validationResultsDir+"/regression";

    /**
     * Classification Validation Results.
     */
    private static final String
                ClassificationValidationResultsDir = validationResultsDir+"/classification";

    /**
     * Path to the repository of validation results for MLR regression models.
     */
    protected static final String
                MlrValidationResultsDir=RegressionValidationResultsDir+"/mlr";

    /**
     * Path to the repository of validation results for SVC classification
     * models.
     */
    protected static final String
                SvcValidationResultsDir=ClassificationValidationResultsDir+"/svc";


    /**
     * Path to the repository of static files (HTML, CSS and other Static content)
     */
    private static final String
                StaticDir=baseDir+"/Static";

    /**
     * Path to the repository of HTML files (Web Interface)
     */
    public static final String
                HTMLDir=StaticDir+"/HTML";

    /**
     * Path to the javadoc directory
     */
    public static final String
                javadocDir=StaticDir+"/javadoc";
    



    /**
     * Class Constructor.
     * @param context
     * @param request
     * @param response
     */
    public AbstractResource(Context context, Request request,
            Response response)
    {
        super(context, request, response);
        
        logger=Logger.getLogger(getClass().getName());
        logger.setUseParentHandlers(false);
        ConsoleHandler ch = new ConsoleHandler();	
        logger.addHandler(ch);
        System.gc();
    }


    protected String getBaseDirectory(){
        return baseDir;
    }

    /**
     * Returns a Map&lt;String, Set&lt;String&gt;&gt; which maps a <tt>key<tt> to
     * a set of algorithm ids. For example if we want to retrieve the validation
     * algorithms' ids as a Set, that would be:<br/><br/>
     * <code>
     * Set&lt;String&gt; validationAlgorithmsIds = getAlgorithmIdsAsMap().get("validation");<br/>
     * </code><br/>
     * Valid <tt>key</tt> values are classification, regression, featureselection and validation.
     * For example you can get the set of classification algorithms using the following line:
     * <br/><br/>
     * <code>
     * Set&lt;String&gt; ClassificationIdsSet= getAlgorithmIdsAsMap().get("classification");<br/>
     * </code>
     * @return
     */
    protected Map<String,Set<String>> getAlgorithmIdsAsMap(){
        Map<String, Set<String>> map = new HashMap<String,Set<String>>();
        map.put("regression", RegressionAlgorithmsSet());
        map.put("classification", ClassificationAlgorithmsSet());
        map.put("featureselection", FeatureSelectionAlgorithmsSet());
        map.put("validation", ValidationRoutinesSet());
      return map;
    }


    /**
     *
     * @return the set of regression algorithms
     */
    private Set<String> RegressionAlgorithmsSet(){
        Set<String> regressionAlgorithms = new HashSet<String>();
        regressionAlgorithms.add("mlr");
        regressionAlgorithms.add("svm");
        regressionAlgorithms.add("plsr");
        return regressionAlgorithms;
    }

    /**
     *
     * @return The set of classification algorithms
     */
    private Set<String> ClassificationAlgorithmsSet(){
        Set<String> classificationAlgorithms = new HashSet<String>();
        classificationAlgorithms.add("svc");
        classificationAlgorithms.add("j48c");
        classificationAlgorithms.add("plsc");
        classificationAlgorithms.add("knnc");
        return classificationAlgorithms;
    }



    /**
     *
     * @return The set of all feature selection algorithms
     */
    private Set<String> FeatureSelectionAlgorithmsSet(){
        Set<String> classificationAlgorithms = new HashSet<String>();
        classificationAlgorithms.add("infoGainAttributeEvaluation");
        return classificationAlgorithms;
    }


    /**
     * Returns the set of all algorithms, that is classification, regression
     * and feature selection. Every algorithm has a unique algorithm id.
     * @return The set of all algorithms
     */
    private Set<String> AlgorithmsSet(){
        Set<String> algorithmsSet = new HashSet<String>();
        algorithmsSet.addAll( (Collection<String>)ClassificationAlgorithmsSet() );
        algorithmsSet.addAll( (Collection<String>)RegressionAlgorithmsSet() );
        algorithmsSet.addAll( (Collection<String>)FeatureSelectionAlgorithmsSet() );
        return algorithmsSet;
    }


    /**
     * Returns the set of all validation routines such as "test_set_validation/svc"
     * and "test_set_validation_mlr".
     * @return The set of validation routines
     */
    private Set<String> ValidationRoutinesSet(){
        Set<String> validationRoutinesSet = new HashSet<String>();
        validationRoutinesSet.add("test_set_validation/svc");
        validationRoutinesSet.add("test_set_validation/mlr");
        return validationRoutinesSet;
    }


      

}
